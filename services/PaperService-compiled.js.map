{"version":3,"sources":["PaperService.js"],"names":[],"mappings":"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","file":"PaperService-compiled.js","sourcesContent":["\"use strict\";\r\n\r\nvar pList = require('./jsonDB/paperList2.json');\r\nvar _ = require('underscore');\r\n\r\nmodule.exports = function(app){\r\n\r\n    var DB = _.toArray(pList.db);\r\n    var MAX_RECORDS = DB.length;\r\n\r\n\r\n    //get papers by id\r\n    let getPaperById = function(id)\r\n    {\r\n        return pList.db[id];\r\n    };\r\n\r\n\r\n    let buildResponse = function(payload, isError, code, msg){\r\n        let resp = {results:null,metadata:{count:0,error:isError,statusCode:code,message:msg}};\r\n        var res = payload;\r\n        if(! _.isArguments(res))\r\n            res = _.toArray(payload);\r\n        var count = res.length;\r\n        resp.results = res;\r\n        resp.metadata.count = count;\r\n        return resp;\r\n    };\r\n\r\n    app.get('/publications', function(req, res, next) {\r\n        req.url = '/publications/';\r\n        next();\r\n    });\r\n    app.get('/publications/all', function(req, res, next) {\r\n        req.url = '/publications/';\r\n        next();\r\n    });\r\n\r\n\r\n    app.get('/publications/:id', function(req, res) {\r\n        //simulate an expensive call --getPaperById using a promise\r\n        let dbCall = new Promise((fOk, fFail) => {\r\n            let result = getPaperById(req.params.id);\r\n\r\n            if(result)\r\n                fOk(result);\r\n            else\r\n                fFail(\"Paper with ID of \" + req.params.id + \"  was not found\");\r\n        });\r\n\r\n        dbCall.then( (data) => {\r\n            res.json(buildResponse([data],false,200,\"OK\"))\r\n        }).catch( (errMsg) => {\r\n            res.status(404);\r\n            res.json(buildResponse([], true, 404, errMsg));\r\n        });\r\n    });\r\n\r\n    //Get all of the papers\r\n\r\n\r\n    app.get('/publications/', function(req, res) {\r\n\r\n        var l = req.query.limit;\r\n        var o = req.query.offset;\r\n\r\n        if(l == null && o == null) {\r\n\r\n            //simple syn version below\r\n            //var resp = buildResponse(DB,false,200,\"OK\");\r\n            //res.json(resp);\r\n\r\n            let call = new Promise( (fOk,fFail) => {\r\n                fOk(buildResponse(DB,false,200,\"OK\"));\r\n            }).then ( (returnData) => res.json(returnData))\r\n            .catch((error) => {\r\n                res.json(buildResponse([],true,400,\"An unknonwn error has happened \" + error));\r\n            });\r\n        }\r\n        else\r\n        if(l == null || o == null)\r\n            res.json(buildResponse([],true,400,\"Both the limit and offset variables are required if one is used\"));\r\n        else {\r\n\r\n            let li = parseInt(l);\r\n            let oi = parseInt(o);\r\n\r\n            if(oi > MAX_RECORDS|| oi < 1)\r\n                res.json(buildResponse([],true,400,\"Offset variable is out of range \"));\r\n            else if(li < 0)\r\n                res.json(buildResponse([],true,400,\"Limit must be positive\"));\r\n            else{\r\n                //finally all parameters are OK, build the response structure and return it\r\n                //start position is o-1, end is o+l\r\n\r\n                //let RspList = DB.slice(oi-1,oi-1+li)\r\n                //res.json(buildResponse(RspList,false,200,\"OK\"));\r\n\r\n                let call = new Promise( (fOk,fFail) => {\r\n                    fOk(DB.slice(oi-1,oi-1+li));\r\n                }).then ( (returnArray) => {\r\n                        res.json(res.json(buildResponse(returnArray,false,200,\"OK\")));\r\n                    })\r\n                    .catch((error) => {\r\n                        res.json(buildResponse([],true,400,\"An unknonwn error has happened \"+error));\r\n                    });\r\n            }\r\n        }\r\n\r\n    });\r\n};\r\n\r\n\r\n"]}